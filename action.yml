name: pr-cleanup
description: Delete PR artifacts and strike out previews
inputs:
  github-token:
    required: true
  release-marker:
    required: false
    default: "ðŸŽ¯ PR Release ðŸŽ¯"
runs:
  using: composite
  steps:
    - name: Delete PR artifacts
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            // Filter artifacts that contain the PR number
            const prArtifacts = artifacts.data.artifacts.filter(artifact => 
              artifact.name.includes(`PR-${prNumber}-`)
            );
            
            console.log(`Found ${prArtifacts.length} artifacts for PR #${prNumber}`);
            
            // Delete each artifact
            for (const artifact of prArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.error(`Failed to delete artifact ${artifact.name}:`, error.message);
              }
            }
            
            console.log(`Cleanup completed for PR #${prNumber}`);

    - name: Strike out previews
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const releaseMarker = '${{ inputs.release-marker }}';
          const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
          let body = pr.data.body || '';

          if (!body.includes(releaseMarker)) {
            console.log('No release marker found.');
            return;
          }
          const lines = body.split(/\r?\n/);
          let inRelease = false;
          let doneMarking = false;
          const previewRegex = /^ðŸ‘‰ \[Preview \d+\]/;
          for (let i = 0; i < lines.length; i++) {
            const raw = lines[i];
            const trimmed = raw.trim();
            if (!inRelease && raw.includes(releaseMarker)) {
              inRelease = true;
              continue; // keep marker unchanged
            }
            if (inRelease) {
              // End release section when first non-preview, non-empty line appears
              if (trimmed !== '' && !previewRegex.test(trimmed)) {
                inRelease = false;
                doneMarking = true;
              } else if (previewRegex.test(trimmed)) {
                // Strike through preview line if not already marked and remove link
                let noLink = raw.replace(/\[Preview (\d+)\]\([^)]+\)/, 'Preview $1');
                // Nur markieren wenn noch nicht entfernt
                if (!raw.includes('~~') && !raw.toLowerCase().includes('(removed)')) {
                  lines[i] = `~~${noLink}~~ (removed)`;
                  console.log(`Marked & link disabled: ${raw}`);
                }
              } else {
                // Leave empty lines inside preview list unchanged
              }
            }
            if (doneMarking) break; // stop after end of section
          }
          const newBody = lines.join('\n');
          if (newBody === body) {
            console.log('No changes to body.');
            return;
          }
          await github.rest.pulls.update({ owner, repo, pull_number: prNumber, body: newBody });
          console.log('Preview lines struck through.');

        