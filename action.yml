name: pr-cleanup
description: Delete PR artifacts and strike out previews
inputs:
  github-token:
    required: true
  release-marker:
    required: false
    default: "ðŸŽ¯ PR Release ðŸŽ¯"
runs:
  using: composite
  steps:
    - name: Delete PR artifacts
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
          const headSha = pr.data.head.sha;
          const headBranch = pr.data.head.ref;
          const headRepoId = pr.data.head.repo.id;

          const runs = await github.paginate(github.rest.actions.listWorkflowRunsForRepo, {
            owner, repo, per_page: 100
          });

          const relevant = [];
            const map = new Map();
            for (const r of runs) {
              const assoc = (r.pull_requests||[]).some(p => p.number === prNumber)
                || r.head_sha === headSha
                || (r.head_branch === headBranch && r.head_repository?.id === headRepoId);
              if (assoc && !map.has(r.id)) { map.set(r.id, r); relevant.push(r); }
            }

          let deleted = 0;
          for (const run of relevant) {
            const arts = await github.paginate(github.rest.actions.listWorkflowRunArtifacts, {
              owner, repo, run_id: run.id, per_page: 100
            });
            for (const a of arts) {
              if (a.expired) continue;
              try {
                await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: a.id });
                console.log(`Deleted ${a.name}`);
                deleted++;
              } catch(e){ console.log(`Failed ${a.name}: ${e.message}`); }
            }
          }
          console.log(`Total deleted: ${deleted}`);

    - name: Strike out previews
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const releaseMarker = '${{ inputs.release-marker }}';
          const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
          let body = pr.data.body || '';
          if (!body.includes(releaseMarker)) { console.log('Marker missing'); return; }

          const lines = body.split(/\r?\n/);
          const idx = lines.findIndex(l => l.includes(releaseMarker));
          if (idx === -1) return;
          let changed = false;
          for (let i = idx + 1; i < lines.length; i++) {
            const raw = lines[i];
            if (/~~\s*ðŸ‘‰\s*Preview\s+\d+~~\s*\(removed\)/.test(raw)) continue;
            let m = raw.match(/^ðŸ‘‰ \[Preview (\d+)\]\([^)]+\)/) || raw.match(/^ðŸ‘‰ Preview (\d+)/);
            if (m) {
              lines[i] = `~~ðŸ‘‰ Preview ${m[1]}~~ (removed)`;
              changed = true;
            }
          }
          if (!changed) { console.log('No changes'); return; }
          await github.rest.pulls.update({ owner, repo, pull_number: prNumber, body: lines.join('\n') });
          console.log('Previews struck out.');