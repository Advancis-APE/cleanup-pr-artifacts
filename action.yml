name: pr-cleanup
description: Delete PR artifacts and strike out previews
inputs:
  github-token:
    required: true
  release-marker:
    required: false
    default: "ðŸŽ¯ PR Release ðŸŽ¯"
runs:
  using: composite
  steps:
    - name: Delete PR artifacts
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            // Filter artifacts that contain the PR number
            const prArtifacts = artifacts.data.artifacts.filter(artifact => 
              artifact.name.includes(`PR-${prNumber}-`)
            );
            
            console.log(`Found ${prArtifacts.length} artifacts for PR #${prNumber}`);
            
            // Delete each artifact
            for (const artifact of prArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.error(`Failed to delete artifact ${artifact.name}:`, error.message);
              }
            }
            
            console.log(`Cleanup completed for PR #${prNumber}`);

    - name: Strike out previews
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const releaseMarker = '${{ inputs.release-marker }}';
          const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
          let body = pr.data.body || '';

            if (!body.includes(releaseMarker)) {
              console.log('No release marker found.');
              return;
            }

            const lines = body.split(/\r?\n/);
            const markerIndex = lines.findIndex(l => l.includes(releaseMarker));
            if (markerIndex === -1) {
              console.log('Marker index not found.');
              return;
            }

            let changed = false;

            for (let i = markerIndex + 1; i < lines.length; i++) {
              const raw = lines[i];

              // Skip previews already removed
              if (/~~\s*ðŸ‘‰\s*Preview\s+\d+~~\s*\(removed\)/.test(raw)) {
                continue;
              }

              // Match lines with link: ðŸ‘‰ [Preview N](...)
              let m = raw.match(/^ðŸ‘‰ \[Preview (\d+)\]\([^)]+\)/);
              if (m) {
                const num = m[1];
                lines[i] = `~~ðŸ‘‰ Preview ${num}~~ (removed)`;
                console.log(`Removed preview with link: ${raw}`);
                changed = true;
                continue;
              }
            }

            if (!changed) {
              console.log('No preview lines changed.');
              return;
            }

            const newBody = lines.join('\n');
            await github.rest.pulls.update({ owner, repo, pull_number: prNumber, body: newBody });
            console.log('All preview lines struck through.');

        